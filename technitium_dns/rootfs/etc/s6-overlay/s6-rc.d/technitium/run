#!/usr/bin/with-contenv bashio
# ==============================================================================
# Home Assistant Technitium DNS Server add-on
# Runs the Technitium DNS Server
# ==============================================================================

bashio::log.info "Starting Technitium DNS Server..."

# Get configuration
WEB_PORT=$(bashio::config 'web_port')
DNS_PORT=$(bashio::config 'dns_port')
ADMIN_USER=$(bashio::config 'admin_user')
ADMIN_PASSWORD=$(bashio::config 'admin_password')
ENABLE_BLOCKING=$(bashio::config 'enable_blocking')
ENABLE_LOGGING=$(bashio::config 'enable_logging')
LOG_LEVEL=$(bashio::config 'log_level')
PREFER_IPV6=$(bashio::config 'prefer_ipv6')
FORWARDERS=$(bashio::config 'forwarders')
FORWARDER_PROTOCOL=$(bashio::config 'forwarder_protocol')

# Create config directory if it doesn't exist
mkdir -p /data/config
mkdir -p /data/logs

# Set working directory
cd /opt/technitium

# Set environment variables for Technitium DNS configuration
export ASPNETCORE_URLS="http://+:${WEB_PORT}"

# Configure Technitium DNS using environment variables
# These are only used when no config exists (first run)
bashio::log.info "Configuring Technitium DNS via environment variables..."

export DNS_SERVER_DOMAIN="technitium-dns.local"
export DNS_SERVER_WEB_SERVICE_LOCAL_ADDRESSES="0.0.0.0"
export DNS_SERVER_WEB_SERVICE_HTTP_PORT="${WEB_PORT}"
export DNS_SERVER_WEB_SERVICE_ENABLE_HTTPS="false"
export DNS_SERVER_WEB_SERVICE_USE_SELF_SIGNED_CERT="false"
export DNS_SERVER_RECURSION="AllowOnlyForPrivateNetworks"
export DNS_SERVER_ENABLE_BLOCKING="${ENABLE_BLOCKING,,}"
export DNS_SERVER_ALLOW_TXT_BLOCKING_REPORT="true"
export DNS_SERVER_LOG_USING_LOCAL_TIME="false"
export DNS_SERVER_PREFER_IPV6="${PREFER_IPV6,,}"

# Set forwarders if provided (optional - if empty, Technitium will work as full recursive resolver)
if [[ -n "${FORWARDERS}" ]]; then
    bashio::log.info "Configuring DNS forwarders: ${FORWARDERS}"
    export DNS_SERVER_FORWARDERS="${FORWARDERS}"
    export DNS_SERVER_FORWARDER_PROTOCOL="${FORWARDER_PROTOCOL}"
else
    bashio::log.info "No forwarders configured - operating as full recursive resolver"
fi

# Set admin credentials if provided
if [[ -n "${ADMIN_PASSWORD}" ]]; then
    bashio::log.info "Setting admin credentials..."
    export DNS_SERVER_ADMIN_PASSWORD="${ADMIN_PASSWORD}"
fi

bashio::log.info "Starting Technitium DNS Server on port ${DNS_PORT} with web interface on port ${WEB_PORT}..."

# Start Technitium DNS Server
exec dotnet /opt/technitium/DnsServerApp.dll /data/config
